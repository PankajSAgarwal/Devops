1. Install kubectl utility

kubernetes.io>Documentation>Tasks>Install and Setup Kubectl

2. Installing Kubectl utility before installating Minikube will allow Minikube to configure kubectl utility to work with cluster when it provisions it.

2. Install kubectl on macos

curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/darwin/amd64/kubectl"

chmod +x ./kubectl

sudo mv ./kubectl /usr/local/bin/kubectl


kubectl version --client

3. Install with Homebrew on macOS

If you are on macOS and using Homebrew package manager, you can install kubectl with Homebrew.

Run the installation command:

brew install kubectl 
or

brew install kubernetes-cli
Test to ensure the version you installed is up-to-date:

kubectl version --client

4. Install Minikube

- Before installing Minikube , make sure virtualization is enabled for the OS that u are using

To check if virtualization is supported on Linux, run the following command and verify that the output is non-empty:

grep -E --color 'vmx|svm' /proc/cpuinfo

To check if virtualization is supported on macOS, run the following command on your terminal.

sysctl -a | grep -E --color 'machdep.cpu.features|VMX'
If you see VMX in the output (should be colored), the VT-x feature is enabled in your machine.

- Install virtualbox

$ brew cask install virtualbox

- Install Minikube

brew install minikube

5. Confirm Installation

To confirm successful installation of both a hypervisor and Minikube, you can run the following command to start up a local Kubernetes cluster:

minikube start --driver=<driver_name> // for virtualbox as hypervisor <<drivername>> is virtualbox

minikube start --driver=virtualbox

6. Once minikube start finishes, run the command below to check the status of the cluster:

minikube status

If your cluster is running, the output from minikube status should be similar to:

host: Running
kubelet: Running
apiserver: Running
kubeconfig: Configured
After you have confirmed whether Minikube is working with your chosen hypervisor, you can continue to use Minikube or you can stop your cluster. To stop your cluster, run:

minikube stop

7. ~ $ kubectl get nodes
NAME       STATUS   ROLES    AGE     VERSION
minikube   Ready    master   3m20s   v1.18.3

8. Let's create a Kubernetes Deployment using an existing image named echoserver, which is a simple HTTP server and expose it on port 8080 using --port.

kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.10

The output is similar to this:

deployment.apps/hello-minikube created

8.  ~ $ kubectl get deployments
NAME             READY   UP-TO-DATE   AVAILABLE   AGE
hello-minikube   1/1     1            1           91s

9. To access the hello-minikube Deployment, expose it as a Service:

kubectl expose deployment hello-minikube --type=NodePort --port=8080

The option --type=NodePort specifies the type of the Service.

The output is similar to this:

service/hello-minikube exposed

10. The hello-minikube Pod is now launched but you have to wait until the Pod is up before accessing it via the exposed Service.

Check if the Pod is up and running:

kubectl get pod

11. Get the URL of the exposed Service to view the Service details:

minikube service hello-minikube --url

12. Delete the hello-minikube Service:

kubectl delete services hello-minikube

13. Delete the hello-minikube Deployment:

kubectl delete deployment hello-minikube

14. Stop the local Minikube cluster:

minikube stop

15. Delete the local Minikube cluster:

minikube delete

