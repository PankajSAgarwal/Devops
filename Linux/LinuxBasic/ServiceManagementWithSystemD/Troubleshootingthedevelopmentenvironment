1. Here is the simple architecture diagram of the implementation. This is a two-tier application.
The web server is hosted on devapp01.
The DB server is hosted on devdb01

2. Task 1: Copy the file caleston-code.tar.gz from Bob's laptop to Bob's home directory on the webserver devapp01

Bob's password is caleston123

Hint: Use the SCP command to copy.

sudo scp /home/bob/caleston-code.tar.gz devapp01:/home/bob

3. Task 2: On the webserver, unzip and extract the copied file in the directory /opt/

Hint : Use the tar command.

bob@devapp01:/opt$ sudo tar -xf /home/bob/caleston-code.tar.gz
[sudo] password for bob:
bob@devapp01:/opt$ ls
caleston-code

4. Task3: Delete the tar file from devapp01

Hint: use the rm command against the tar file caleston-code.tar.gz


bob@devapp01:/opt$ cd /home/bob
bob@devapp01:~$ rm caleston-code.tar.gz
5. For the client demo, Bob has installed a postgres database in devdb01.
SSH to the database devdb01 and check the status of the postgresql.service

What is the state of the DB?
Bob's password is caleston123

Ans: ssh bob@devdb01

systemctl status postgresql.service

6. Task 5: Add an entry host all all 0.0.0.0/0 md5 to the end of the file /etc/postgresql/10/main/pg_hba.conf on the DB server.

This will allow the web application to connect to the DB

Hint: Add the line host all all 0.0.0.0/0 md5 to /etc/postgresql/10/main/pg_hba.conf. You can use a text editor.

7. Task 6: Start the postgres DB on the server.
Hint: use systemctl start postgresql


8. What port is postgres running on? Check using the netstat command.

Hint: Run: netstat -natulp | grep postgres | grep LISTEN

bob@devdb01:~$ sudo netstat -natulp | grep postgres |grep LISTEN
tcp        0      0 0.0.0.0:5432            0.0.0.0:*               LISTEN      250/postgres
tcp6       0      0 :::5432                 :::*                    LISTEN      250/postgres

Ans : 5432

9. Task 7: Back on the webserver. Attempt to start the web application by:

Navigate to the directory /opt/caleston-code/mercuryProject
Next, run the command python3 manage.py runserver 0.0.0.0:8000

Was the command successful? Did the application load up?

Key in Control + C to get back to the bash prompt.

Ans: No

10. Why did the command not work?

a)Connection refused to DB on 127.0.0.1,port 5433
b) packages missing
c) Connection refused to DB on 172.16.238.10,port 5432
d) Configuration files not found

Check the error logs from the last command.

Error Logs
bob@devapp01:/opt/caleston-code/mercuryProject$ python3 manage.py runserver 0.0.0.0:8000
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
Exception in thread django-main-thread:
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/django/db/backends/base/base.py", line 217, in ensure_connection
    self.connect()
  File "/usr/local/lib/python3.6/dist-packages/django/db/backends/base/base.py", line 195, in connect
    self.connection = self.get_new_connection(conn_params)
  File "/usr/local/lib/python3.6/dist-packages/django/db/backends/postgresql/base.py", line 178, in get_new_connection
    connection = Database.connect(**conn_params)
  File "/usr/local/lib/python3.6/dist-packages/psycopg2/__init__.py", line 127, in connect
    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
psycopg2.OperationalError: could not connect to server: Connection refused
        Is the server running on host "localhost" (127.0.0.1) and accepting
        TCP/IP connections on port 5433?
could not connect to server: Cannot assign requested address
        Is the server running on host "localhost" (::1) and accepting
        TCP/IP connections on port 5433?


The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/usr/lib/python3.6/threading.py", line 916, in _bootstrap_inner
    self.run()
  File "/usr/lib/python3.6/threading.py", line 864, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/local/lib/python3.6/dist-packages/django/utils/autoreload.py", line 54, in wrapper
    fn(*args, **kwargs)
  File "/usr/local/lib/python3.6/dist-packages/django/core/management/commands/runserver.py", line 120, in inner_run
    self.check_migrations()
  File "/usr/local/lib/python3.6/dist-packages/django/core/management/base.py", line 453, in check_migrations
    executor = MigrationExecutor(connections[DEFAULT_DB_ALIAS])
  File "/usr/local/lib/python3.6/dist-packages/django/db/migrations/executor.py", line 18, in __init__
    self.loader = MigrationLoader(self.connection)
  File "/usr/local/lib/python3.6/dist-packages/django/db/migrations/loader.py", line 49, in __init__
    self.build_graph()
  File "/usr/local/lib/python3.6/dist-packages/django/db/migrations/loader.py", line 212, in build_graph
    self.applied_migrations = recorder.applied_migrations()
  File "/usr/local/lib/python3.6/dist-packages/django/db/migrations/recorder.py", line 73, in applied_migrations
    if self.has_table():
  File "/usr/local/lib/python3.6/dist-packages/django/db/migrations/recorder.py", line 56, in has_table
    return self.Migration._meta.db_table in self.connection.introspection.table_names(self.connection.cursor())
  File "/usr/local/lib/python3.6/dist-packages/django/db/backends/base/base.py", line 256, in cursor
    return self._cursor()
  File "/usr/local/lib/python3.6/dist-packages/django/db/backends/base/base.py", line 233, in _cursor
    self.ensure_connection()
  File "/usr/local/lib/python3.6/dist-packages/django/db/backends/base/base.py", line 217, in ensure_connection
    self.connect()
  File "/usr/local/lib/python3.6/dist-packages/django/db/utils.py", line 89, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/usr/local/lib/python3.6/dist-packages/django/db/backends/base/base.py", line 217, in ensure_connection
    self.connect()
  File "/usr/local/lib/python3.6/dist-packages/django/db/backends/base/base.py", line 195, in connect
    self.connection = self.get_new_connection(conn_params)
  File "/usr/local/lib/python3.6/dist-packages/django/db/backends/postgresql/base.py", line 178, in get_new_connection
    connection = Database.connect(**conn_params)
  File "/usr/local/lib/python3.6/dist-packages/psycopg2/__init__.py", line 127, in connect
    conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
django.db.utils.OperationalError: could not connect to server: Connection refused
        Is the server running on host "localhost" (127.0.0.1) and accepting
        TCP/IP connections on port 5433?
could not connect to server: Cannot assign requested address
        Is the server running on host "localhost" (::1) and accepting
        TCP/IP connections on port 5433?
Ans:a

11. Task 8: It appears that Bob did not configure his app to connect a postgres database running on a different server.
That explains why things are working in his laptop and not in the DEV servers.
It also appears that he is using the wrong port for postgres!

Find the file in the directory under /opt/caleston-code that has a string matching DATABASES = {.
Replace the value of localhost to devdb01
In the same file fix the postgres port to match the port being used on devdb01

Hint: use grep / find or any other commands to locate the file.

example: grep -ir "DATABASES = {" /opt/caleston-code/

12. Task 9: Now that has been set up, change the ownership of ALL files and directories under /opt/caleston-code to user mercury

Hint: use sudo chown -R mercury /opt/caleston-code to recursively change ownership of files.


bob@devapp01:/opt/caleston-code/mercuryProject/mercury$ sudo chown -R mercury /opt/caleston-code/

13. Great! Everything should now be in order to restart the application.
On the devapp01 start the webserver again by running the command:

Navigate to the directory /opt/caleston-code/mercuryProject
Next, run the command python3 manage.py runserver 0.0.0.0:8000

This should have been successful now.
To access the application, click on the Project Mercury tab!

14.Well done! Now, for the final task before the client presentation.
Create a new service called mercury.service with the following requirements.

Service name, mercury.service, WorkingDirectory: /opt/caleston-code/mercuryProject/, Command to run: python3 manage.py runserver 0.0.0.0:8000
Restart on failure and enable for multi-user.target
Run as user mercury.
4. Set description: Project Mercury Web Application

Create the unit file under /etc/systemd/system. Once done enable and start the mercury.service.

Hint : The service file should look like this:
[Unit]
Description=Project Mercury Web Application

[Service]
ExecStart=/usr/bin/python3 manage.py runserver 0.0.0.0:8000
Restart=on-failure
WorkingDirectory=/opt/caleston-code/mercuryProject
User=mercury

[Install]
WantedBy=multi-user.target

bob@devapp01:/opt/caleston-code/mercuryProject$ sudo vi /etc/systemd/system/mercury.service
bob@devapp01:/opt/caleston-code/mercuryProject$ sudo systemctl enable mercury.service
Created symlink /etc/systemd/system/multi-user.target.wants/mercury.service â†’ /etc/systemd/system/mercury.service.bob@devapp01:/opt/caleston-code/mercuryProject$ sudo systemctl start mercury.service











